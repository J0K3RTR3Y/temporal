// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: task.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../LICENSE -package chasm -source task.go -destination task_mock.go
//

// Package chasm is a generated GoMock package.
package chasm

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSideEffectTaskHandler is a mock of SideEffectTaskHandler interface.
type MockSideEffectTaskHandler[C any, T any] struct {
	ctrl     *gomock.Controller
	recorder *MockSideEffectTaskHandlerMockRecorder[C, T]
	isgomock struct{}
}

// MockSideEffectTaskHandlerMockRecorder is the mock recorder for MockSideEffectTaskHandler.
type MockSideEffectTaskHandlerMockRecorder[C any, T any] struct {
	mock *MockSideEffectTaskHandler[C, T]
}

// NewMockSideEffectTaskHandler creates a new mock instance.
func NewMockSideEffectTaskHandler[C any, T any](ctrl *gomock.Controller) *MockSideEffectTaskHandler[C, T] {
	mock := &MockSideEffectTaskHandler[C, T]{ctrl: ctrl}
	mock.recorder = &MockSideEffectTaskHandlerMockRecorder[C, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSideEffectTaskHandler[C, T]) EXPECT() *MockSideEffectTaskHandlerMockRecorder[C, T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSideEffectTaskHandler[C, T]) Execute(arg0 context.Context, arg1 ComponentRef, arg2 T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSideEffectTaskHandlerMockRecorder[C, T]) Execute(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSideEffectTaskHandler[C, T])(nil).Execute), arg0, arg1, arg2)
}

// MockPureTaskHandler is a mock of PureTaskHandler interface.
type MockPureTaskHandler[C any, T any] struct {
	ctrl     *gomock.Controller
	recorder *MockPureTaskHandlerMockRecorder[C, T]
	isgomock struct{}
}

// MockPureTaskHandlerMockRecorder is the mock recorder for MockPureTaskHandler.
type MockPureTaskHandlerMockRecorder[C any, T any] struct {
	mock *MockPureTaskHandler[C, T]
}

// NewMockPureTaskHandler creates a new mock instance.
func NewMockPureTaskHandler[C any, T any](ctrl *gomock.Controller) *MockPureTaskHandler[C, T] {
	mock := &MockPureTaskHandler[C, T]{ctrl: ctrl}
	mock.recorder = &MockPureTaskHandlerMockRecorder[C, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPureTaskHandler[C, T]) EXPECT() *MockPureTaskHandlerMockRecorder[C, T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPureTaskHandler[C, T]) Execute(arg0 Context, arg1 C, arg2 T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPureTaskHandlerMockRecorder[C, T]) Execute(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPureTaskHandler[C, T])(nil).Execute), arg0, arg1, arg2)
}

// MockTaskValidator is a mock of TaskValidator interface.
type MockTaskValidator[C any, T any] struct {
	ctrl     *gomock.Controller
	recorder *MockTaskValidatorMockRecorder[C, T]
	isgomock struct{}
}

// MockTaskValidatorMockRecorder is the mock recorder for MockTaskValidator.
type MockTaskValidatorMockRecorder[C any, T any] struct {
	mock *MockTaskValidator[C, T]
}

// NewMockTaskValidator creates a new mock instance.
func NewMockTaskValidator[C any, T any](ctrl *gomock.Controller) *MockTaskValidator[C, T] {
	mock := &MockTaskValidator[C, T]{ctrl: ctrl}
	mock.recorder = &MockTaskValidatorMockRecorder[C, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskValidator[C, T]) EXPECT() *MockTaskValidatorMockRecorder[C, T] {
	return m.recorder
}

// Validate mocks base method.
func (m *MockTaskValidator[C, T]) Validate(arg0 Context, arg1 C, arg2 T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTaskValidatorMockRecorder[C, T]) Validate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTaskValidator[C, T])(nil).Validate), arg0, arg1, arg2)
}
